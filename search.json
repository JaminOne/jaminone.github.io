[{"title":"Project: OpenCV with Python to deal with image detection and process","url":"/2020/07/10/Project-OpenCV-with-Python-to-deal-with-image-detection-and-process/","content":"OpenCV is a powerful library in python when the objects are images and videos. Before the project starts, I need to install opencv-python, Numpy and Matplotlib in command line.\n\npip install numpy\npip install matplotlib\npip install opencv-python\n\nOpenCV's official [documentation page](https://docs.opencv.org/4.3.0/d2/d96/tutorial_py_table_of_contents_imgproc.html) \n\nPlease note that OpenCV is not compatible with jupyter notebook and spyder, therefore I used Visual Studio to do this task.\n\nThe final result can circle each coin with its value, and calculate total value on the image as well.\n![](https://github.com/JaminOne/jaminone.github.io/blob/master/img/710opencv.jpg)\n\nMy code is below:\n```\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\n#function \ndef get_radius(circles):\n    radius = []\n    for j in circles[0,:]:\n        radius.append(j[2])\n    return radius\n\ndef av_pix(img,circles,size):\n    av_value = []\n    for coords in circles[0,:]:\n        col = np.mean(img[coords[1]-size:coords[1]+size,coords[0]-size:coords[0]+size])\n        #print(img[coords[1]-size:coords[1]+size,coords[0]-size:coords[0]+size])\n        av_value.append(col)\n    return av_value  \n\nimg = cv2.imread('E:\\\\NZStudy\\\\Python\\\\capstone_coins.png',0)\noriginal_image = cv2.imread('E:\\\\NZStudy\\\\Python\\\\capstone_coins.png',1)\n# convert BGR to RGB to be suitable for showing using matplotlib library\nimg = cv2.medianBlur(img,5)\ncimg = cv2.cvtColor(img,cv2.COLOR_GRAY2BGR)\nfont = cv2.FONT_HERSHEY_SIMPLEX \n\n#use houghcircles to detect coin\ncircles = cv2.HoughCircles(img,cv2.HOUGH_GRADIENT,1,130,\n                            param1=44,param2=75,minRadius=0,maxRadius=200)\nprint(circles)\n\ncircles = np.uint16(np.around(circles))\ncount = 1\nfor i in circles[0,:]:\n    # draw the outer circle\n    cv2.circle(original_image,(i[0],i[1]),i[2],(0,255,0),2)\n    # draw the center of the circle\n    cv2.circle(original_image,(i[0],i[1]),2,(0,0,255),3)\n    count +=1\n\n\nradii = get_radius(circles)\nprint(radii)\n\nbright_values = av_pix(img,circles,20)\nprint(bright_values)\n\nvalues = []\nfor a,b in zip(bright_values,radii):\n    if a > 150 and b > 106.5:\n        values.append(10)\n    elif a > 150 and b <= 106.5:\n        values.append(5)\n    elif a < 150 and b > 106.5:\n        values.append(2)\n    elif a < 150 and b < 106.5:\n        values.append(1)        \nprint(values)           \ncount_2 = 0\nfor i in circles[0,:]:\n    \n    cv2.putText(original_image, str(values[count_2]) + 'p',(i[0],i[1]), cv2.FONT_HERSHEY_SIMPLEX, 2, (0,0,0), 2)\n    count_2 += 1\ncv2.putText(original_image, 'ESTIMATED TOTAL VALUE: ' + str(sum(values)) + 'p', (200,100), cv2.FONT_HERSHEY_SIMPLEX, 1.3, 255)\n \noriginal_image = cv2.resize(original_image, (960, 540))\ncv2.imshow('detected circles',original_image)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```"},{"title":"myblogpost1","url":"/2020/07/08/myblogpost1/","content":"There isn’t a way to select multiple files for deletion using the Web UI at the moment, but I’ll let the team know you’d like us to add this feature in the future.\n\nIn the meantime, the way we recommend editing or deleting multiple files is by working with a local repository. You would then be able to delete the files in your local clone, commit that change to your local repository, and then push that change to the remote repository on GitHub.\n\nThe steps for doing this are:\n\nIn the command-line, navigate to your local repository.\nEnsure you are in the default branch:\ngit checkout master\nThe rm -r command will recursively remove your folder:\ngit rm -r folder-name\nCommit the change:\ngit commit -m \"Remove duplicated directory\"\nPush the change to your remote repository:\ngit push origin master\nI hope this helps!","tags":["test"]}]